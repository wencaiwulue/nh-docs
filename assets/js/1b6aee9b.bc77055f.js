"use strict";(self.webpackChunknh_docs=self.webpackChunknh_docs||[]).push([[7247],{3905:function(e,n,t){t.d(n,{Zo:function(){return s},kt:function(){return f}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},s=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},d=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),d=p(t),f=o,m=d["".concat(c,".").concat(f)]||d[f]||u[f]||i;return t?r.createElement(m,a(a({ref:n},s),{},{components:t})):r.createElement(m,a({ref:n},s))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=d;var l={};for(var c in n)hasOwnProperty.call(n,c)&&(l[c]=n[c]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var p=2;p<i;p++)a[p]=t[p];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}d.displayName="MDXCreateElement"},8311:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return l},contentTitle:function(){return c},metadata:function(){return p},toc:function(){return s},default:function(){return d}});var r=t(2122),o=t(9756),i=(t(7294),t(3905)),a=["components"],l={},c="Config Reference",p={unversionedId:"config/config-ref",id:"config/config-ref",isDocsHomePage:!1,title:"Config Reference",description:"For full Nocalhost config specs, please refer to Nocalhost Config Specs",source:"@site/docs/config/config-ref.md",sourceDirName:"config",slug:"/config/config-ref",permalink:"/nh-docs/docs/config/config-ref",editUrl:"https://github.com/neaped/nh-docs/docs/config/config-ref.md",version:"current",lastUpdatedBy:"Garry",lastUpdatedAt:1627972766,formattedLastUpdatedAt:"8/3/2021",frontMatter:{},sidebar:"docs",previous:{title:"Configure DevContainer",permalink:"/nh-docs/docs/guides/devcontainer-config"},next:{title:"Basic",permalink:"/nh-docs/docs/config/config-deploy"}},s=[{value:"<code>configProperties</code>",id:"configproperties",children:[]},{value:"<code>application</code>",id:"application",children:[{value:"<code>application[*].onPreInstall</code>",id:"applicationonpreinstall",children:[]},{value:"<code>application[*].helmValues</code>",id:"applicationhelmvalues",children:[]},{value:"<code>application[*].env</code>",id:"applicationenv",children:[]},{value:"<code>application[*].envFrom</code>",id:"applicationenvfrom",children:[]},{value:"<code>application[*].services</code>",id:"applicationservices",children:[]}]}],u={toc:s};function d(e){var n=e.components,t=(0,o.Z)(e,a);return(0,i.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"config-reference"},"Config Reference"),(0,i.kt)("p",null,"For full Nocalhost config specs, please refer to ",(0,i.kt)("a",{parentName:"p",href:"../reference/nh-config"},"Nocalhost Config Specs")),(0,i.kt)("h2",{id:"configproperties"},(0,i.kt)("inlineCode",{parentName:"h2"},"configProperties")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"configProperties:               # struct    | required | Specify config properties\n    version: v2                 # string    | required | config file version\n    envFile: env.dev            # string    | optional | env file name, substitution variable for this file\n")),(0,i.kt)("h2",{id:"application"},(0,i.kt)("inlineCode",{parentName:"h2"},"application")),(0,i.kt)("p",null,"Nocalhost will use these configurations to deploy your application."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"application:                    # struct    | required | Specify application configuration\n    name: foo-app               # string    | required | Application name\n    manifestType: rawManifest   # srting    | required | Application k8s manifest type\n    helmVersion: 0.0.1          # string    | optional | Set default application version for helmRepo\n    resourcePath: []            # string[]  | required | Set the application resource path\n    ignoredPath: []             # string[]  | optional | \n    onPreInstall: ...           # struct    | optional | The jobs to be executed before application's installation.\n    helmValues: ...             # struct    | optional | Overwrite Helm values.yaml\n    env: ...                    # struct    | optional | Inject environment variable for all workload when installed\n    envFrom: ...                # struct    | optional | Use envFile to inject environment variable for all workload when installed\n    services: ...               # struct    | optional | Applications' services configurations\n")),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"./config-deploy"},"Learn more about how to configure application deploying.")),(0,i.kt)("h3",{id:"applicationonpreinstall"},(0,i.kt)("inlineCode",{parentName:"h3"},"application[*].onPreInstall")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"onPreInstall:\n    - path: \"job-1.yaml\"        # string    | required | Job's yaml file, the relative path of the root directory\n      name: foo-job             # string    | required | Job's name\n      priority: -1              # integer   | required | Order of execution of job, the smallest will be executed first\n")),(0,i.kt)("h3",{id:"applicationhelmvalues"},(0,i.kt)("inlineCode",{parentName:"h3"},"application[*].helmValues")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"helmValues:\n    - kye: DOMAIN                           # string    |\n      value: ${DOMAIN:-www.coding.com}      # string    |\n")),(0,i.kt)("h3",{id:"applicationenv"},(0,i.kt)("inlineCode",{parentName:"h3"},"application[*].env")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"env:\n    - name: DEBUG               # string    | \n      value: ${DEBUG:-true}     # string    |\n")),(0,i.kt)("h3",{id:"applicationenvfrom"},(0,i.kt)("inlineCode",{parentName:"h3"},"application[*].envFrom")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"envFrom:\n    envFile:                    # string[]  |\n      - path: dev.env           # string    |\n      - path: dev.env\n")),(0,i.kt)("h3",{id:"applicationservices"},(0,i.kt)("inlineCode",{parentName:"h3"},"application[*].services")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-yaml"},"services:\n    - name: foo-service                 # string    | required | Name of the service, also is the display name in cluster\n      serviceType: deployment           # string    | required | The Kubernetes Workloads type corresponding to the service\n      dependLabelSelector: ...          # struct    | optional | Dependent Pods label selector \n      container: ...                    # struct    | optional | \n")))}d.isMDXComponent=!0}}]);